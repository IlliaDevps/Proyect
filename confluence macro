{"Alicja Bielejec": 1, "Daniel Loboda": 1, "Filip Maciejewski": 1, "Izabela Seroczynska": 2, "Karolina Romanow": 1, "Lukasz Kopczynski": 1, "Mariusz Dynarzewski": 1, "Michal Porzuc": 2, "Rafal Koc": 3, "Sebastian Stokowski": 3}

## @param backendUrl:title=Backend URL|type=string|required=true

(function() {
  var backendUrl = AJS.params.backendUrl;

  // Disable SSL verification and security certificate checks
  process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

  // Make a GET request to the backend server
  var xhr = new XMLHttpRequest();
  xhr.open("GET", backendUrl, true);

  xhr.onreadystatechange = function() {
    if (xhr.readyState === XMLHttpRequest.DONE) {
      if (xhr.status === 200) {
        var response = xhr.responseText;
        // Process the response as needed
        console.log(response);
      } else {
        console.error("Failed to make request. Status code: " + xhr.status);
      }
    }
  };

  xhr.send();
})();


curl -v https://kb.sprc.samsung.pl/rest/api/content/560868319 --user i.duverkher:4i8c66j5q2o344ercc7kmlrq0u9mofq

import requests

url = "https://kb.sprc.samsung.pl/rest/api/content/560868319"
username = "i.duverkher"
password = "4i8c66j5q2o344ercc7kmlrq0u9mofq"

response = requests.get(url, auth=(username, password))

print(response.text)
------------------------------------------------------------------------
## @param backendUrl:title=Backend URL|type=string|required=true

(function() {
  var backendUrl = AJS.params.backendUrl;

  // Make a GET request to the backend server
  fetch(backendUrl)
    .then(function(response) {
      if (response.ok) {
        return response.text();
      } else {
        throw new Error('Request failed. Status: ' + response.status);
      }
    })
    .then(function(data) {
      console.log(data);
    })
    .catch(function(error) {
      console.error('Error:', error);
    });
})();
-----------------------------------------------------------------------------
## @param backendUrl:title=Backend URL|type=string|required=true

(function() {
  var backendUrl = AJS.params.backendUrl;

  // Create a new AbortController
  var controller = new AbortController();
  var signal = controller.signal;

  // Ignore SSL certificate errors
  var httpsAgent = new https.Agent({
    rejectUnauthorized: false
  });

  // Make a GET request to the backend server
  fetch(backendUrl, {
    method: 'GET',
    signal: signal,
    agent: httpsAgent
  })
    .then(function(response) {
      if (response.ok) {
        return response.text();
      } else {
        throw new Error('Request failed. Status: ' + response.status);
      }
    })
    .then(function(data) {
      console.log(data);
    })
    .catch(function(error) {
      console.error('Error:', error);
    });

  // Abort the request if needed
  // controller.abort();
})();

--------------------------------------------------------------------
## @param backendUrl:title=Backend URL|type=string|required=true

(function() {
  var backendUrl = AJS.params.backendUrl;

  // Create a new XMLHttpRequest object
  var xhr = new XMLHttpRequest();

  // Disable SSL verification by overriding the onreadystatechange method
  xhr.onreadystatechange = function() {
    if (xhr.readyState === xhr.OPENED) {
      xhr._onHttpRequestOpened = xhr._onHttpRequestOpened || xhr._onreadystatechange;
      xhr._onreadystatechange = function() {
        if (xhr.readyState === xhr.DONE) {
          if (xhr.status === 0 || (xhr.status >= 200 && xhr.status < 400)) {
            var response = xhr.responseText;
            // Process the response as needed
            console.log(response);
          } else {
            console.error("Failed to make request. Status code: " + xhr.status);
          }
        }
      };
    }
  };

  // Open a GET request to the backend server
  xhr.open("GET", backendUrl, true);

  // Send the request
  xhr.send();
})();
------------------------------------------------------------
(function() {
  var backendUrl = "YOUR_BACKEND_URL_HERE";

  // Create a new AbortController
  var controller = new AbortController();
  var signal = controller.signal;

  // Ignore SSL certificate errors
  var httpsAgent = new https.Agent({
    rejectUnauthorized: false
  });

  // Make a GET request to the backend server
  fetch(backendUrl, {
    method: 'GET',
    signal: signal,
    agent: httpsAgent
  })
    .then(function(response) {
      if (response.ok) {
        return response.text();
      } else {
        throw new Error('Request failed. Status: ' + response.status);
      }
    })
    .then(function(data) {
      console.log(data);
    })
    .catch(function(error) {
      console.error('Error:', error);
    });

  // Abort the request if needed
  // controller.abort();
})();
